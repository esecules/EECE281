---------------------------------------------------------------------------------------
Document your subroutines here so everyone can know how to use them and what
to expect from them.

an example:

"subroutine_name"  from filename.asm
	Function: (what it does)
	Reads (some register(s) or flags...)
	Modifies (some register(s) or flags...)
	Requires (optional) 

-Dont make changes to the specifications unless absoutly necessary as others will be
 using your code. If a change is necessary notify the whole group via email.

---------------------------------------------------------------------------------------

--------------------------------------------------------------------
--			Public Utilities			  --
--------------------------------------------------------------------
"InitDE2" utilities.asm
	Function: sets up SP and turns LEDs off
	Modifies: SP, all LED registers
	Requires: MUST BE RUN FIRST THING AFTER STARTUP

"BinFrac2BCD" utilities.asm
	Function: converts the fraction byte of a multibyte binary number to 4-digit
		  BCD and stores it in bcd+0 - bcd+1. for example 0x80 converts to 5000
	Reads:	  A
	Modifies: x, y, bcd
	Requires: A contains the byte to convert

"WAIT50MS" utilities.asm
	Function: stalls execution for roughly 50ms. has no side effects.

------------------------------------------------------------
--			Comms				  --
------------------------------------------------------------

"COMMSMAIN" comms.asm
	Function: calls CommsSend every clock tick
	Reads:	  SERsendNextTime, SERlasttime
	Modifies: SERsendNextTime, SERlasttime
	Requires: be run in the main loop

"CommsSend" comms.asm
	Function: sends the message. formatting in done in here
	Reads:	  tempi, tempa
	Modifies: dptr, A, x, bcd

"InitSerialPort" comms.asm
	Function: configure serial port with TIMER2
	Modifies: TR2, T2CON, SCON, RCAP2H, RCAP2L
	Requires: to be run at start of program

"putchar" comms.asm
	Function: send a byte through serial
	Reads:	  A
	Requires: A contains the ASCII code to be sent

"SendString" comms.asm
	Function: send text string
	Reads:    @A+dptr
	Modifies: A
	Requires: dptr is loaded with the message to send,
		  message terminated with null
"SendBCD3" comms.asm
	Function: send bcd number
	Reads:    bcd
	Modifies: A
	Requires: bcd contains the number to send

"SendBCD4" comms.asm
	Function: same as above but sends 4 digits

"getchar" comms.asm
	Function: get a byte through serial
	Reads:    SERIAL PORT
	Modifies: A, SERIAL PORT (echo)

"ASCII" comms.asm
	Function: sends all ASCII characters for testing
	Modifies: A, R7 SERIAL PORT
------------------------------------------------------------------
--			LCD					--
------------------------------------------------------------------

"LCD_Init" LCD_interface.asm
	Function: configures the LCD_display

"LCD_command" LCD_interface.asm
	Function: sends a command to the LCD 
	Reads:	  A
	Modifies: nothing

"LCD_put" LCD_interface.asm
	Function: sends a char to the LCD
	Reads:	  A
	Modifies: nothing
	Requires:  A contains the ASCII code to be sent

"LCD_string" LCD_interface.asm
	Function: sends a string to the LCD
	Reads:	  dptr
	Modifies: A, R1
	Requires: dptr is loaded with the message to send,
		  message terminated with 0

"LCD_float_number" LCD_interface.asm
	Function: sends a string to the LCD
	Reads:	 dptr	
	Modifies: A, R1
	Requires: dptr is loaded with the float number to send,
		  message terminated automaticly by presetting convert_binary_to_string and function itself acordinly. 

"LCD_clear" LCD_interface.asm
	Function: sends a string to the LCD
	Modifies: A, R1

"convert_binary_to_string" LCD_interface.asm
	Function: converts binary numbers from a dtpr to a coresponding string
	Reads:	 dptr
	Modifies: A, B, R7

"custom_character_init" LCD_interface.asm
	Function: sends a ascii code for a custom character via the CGRAM of the LCD.
	Modifies: A

------------------------------------------------------------------
--			Temperature curve			--
------------------------------------------------------------------

"Get_tempi" Temp_lookup.asm --Private--
	Function: updated the ideal temp based on current state
	Reads: heating_state
	Modifies: tempi (ideal temperature based on time)
	Requires: time must be 16 bits 

"Timer2_ISR" Temp_lookup.asm
	Function: increments the system time from 0 to 511 in half second increments
		  rolls over from 511 to 0. Calls get_tempi.
	Reads: TF2, time, timer2_interrup_count
	Modifies: TF2, time, timer2_interrup_count

"Init_timer2" Temp_lookup.asm
	Function: initializes timer2 in auto reload mode to interrupt every 10 ms			
	Reads: TIMER2_RELOAD
 	Modifies: T2CON, TR2, TF2, RCAP2H, RCAP2L, ET2, EA

------------------------------------------------------------------
--				SPI ADC				--
------------------------------------------------------------------
				

"INIT_SPI" spi_adc.asm
	Function: initializes I/O pins for SPI
	Modifies: P0MOD, SCLK & CE_ADC pins
	Requires: be run at startup

"DO_SPI_G"
	Function: general SPI transfer. R0->out, in->R1
	Reads:	  R0
	Modifies: R0, R1, R2
	Requires: R0 contains the byte to send.

"Read_ADC_Channel"
	Function: reads ADC channel specified in B and stores
		  result in R6 (LSB) and R7 (MSB)
	Reads:	  B
	Modifies: A, R0, R6, R7, CE_ADC
	Requires: 0 <= B <= 3

"ReadADC0_64"
	Function: reads ADC channel 0 64 times and stores result
		  in adc+0 and adc+1
	Modifies: adc